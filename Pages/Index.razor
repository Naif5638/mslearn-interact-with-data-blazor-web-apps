@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject OrderState OrderState
@inject IJSRuntime JavaScript

@page "/"

<div class="main">
    <Modal Title="Primer Modal" Show="true">
        <p>
            Este es mi primer componente el cual es un modal.
        </p>
    </Modal>

    <ul class="pizza-cards">
        @if (specials != null)
        {
            @foreach (var special in specials)
            {
                <li style="background-image: url('@special.ImageUrl')"
                    @onclick="@(() => OrderState.ShowConfigurePizzaDialog(special))">
                    <div class="pizza-info">
                        <span class="title">@special.Name</span>
                        @special.Description
                        <span class="price">@special.GetFormattedBasePrice()</span>
                    </div>
                </li>
            }
        }
    </ul>
</div>

@if (OrderState.ShowingConfigureDialog)
{
    <ConfigurePizzaDialog Pizza="OrderState.ConfiguringPizza" OnConfirm="OrderState.ConfirmConfigurePizzaDialog"
        OnCancel="OrderState.CancelConfigurePizzaDialog" />
}

<div class="sidebar">
    @if (order.Pizzas.Any())
    {
        <div class="order-contents">
            <h2>Your order</h2>

            @foreach (var configuredPizza in order.Pizzas)
            {
                <div class="cart-item">
                    <button type="button" class="close text-danger" aria-label="Close"
                        @onclick="@(async () => await RemovePizzaConfirmation(configuredPizza))">
                        <span aria-hidden="true">&times;</span>
                    </button>
                    <div class="title">@(configuredPizza.Size)" @configuredPizza.Special.Name</div>
                    <div class="item-price">
                        @configuredPizza.GetFormattedTotalPrice()
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="empty-cart">Choose a pizza<br>to get started</div>
    }

    <div class="order-total @(order.Pizzas.Any() ? "" : "hidden")">
        Total:
        <span class="total-price">@order.GetFormattedTotalPrice()</span>
        <a href="checkout"
            class="@(OrderState.Order.Pizzas.Count == 0 ? "btn btn-warning disabled" : "btn btn-warning")">
            Order >
        </a>
    </div>
</div>

@code {
    private List<PizzaSpecial> specials = new();
    private Order order => OrderState.Order;

    protected override async Task OnInitializedAsync()
    {
        specials = await HttpClient.GetFromJsonAsync<List<PizzaSpecial>>(NavigationManager.BaseUri + "specials");
    }

    private async Task RemovePizzaConfirmation(Pizza removePizza)
    {
        var messageParams = new
        {
            title = "Remover Pizza",
            text = $"La pizza {removePizza.Special.Name} será removida de su orden. ¿Esta seguro?",
            icon = "warning",
            buttons = new
            {
                abort = new { text = "No", value = false },
                confirm = new { text = "Si, remover pizza", value = true }
            },
            dangerMode = true
        };

        if (await JavaScript.InvokeAsync<bool>("swal", messageParams))
        {
            OrderState.RemoveConfiguredPizza(removePizza);
        }
    }
}